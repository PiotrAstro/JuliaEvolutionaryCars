export DistanceBasedClassificator

"""
DistanceBasedClassificator
encoded exemplars have (number of exemplars, features) shape
translation is a vector of size number of exemplars
"""
struct DistanceBasedClassificator <: AbstractNeuralNetwork
    encoder::AbstractNeuralNetwork
    encoded_exemplars::Matrix{Float32}
    translation::Vector{Int}
    actions_number::Int
end

# function DistanceBasedClassificator(encoder::AbstractNeuralNetwork, encoded_exemplars::Matrix{Float32}, translation::Vector{Int}, actions_number::Int) :: DistanceBasedClassificator 
#     return DistanceBasedClassificator(encoder, encoded_exemplars, translation, actions_number)
# end

function get_parameters(nn::DistanceBasedClassificator) :: Flux.Params
    return get_parameters(nn.encoder)
end

function set_parameters!(nn::DistanceBasedClassificator, parameters::Flux.Params)
    set_parameters!(nn.encoder, parameters)
end

function get_loss(nn::DistanceBasedClassificator) :: Function
    return get_loss(nn.encoder)
end

function get_Flux_representation(nn::DistanceBasedClassificator)
    return get_Flux_representation(nn.encoder)
end

function predict(nn::DistanceBasedClassificator, X::Array{Float32}) :: Array{Float32}
    encoded_X = predict(nn.encoder, X)

    # check which exemplar is the closest
    distances = [vec(sum((nn.encoded_exemplars .- encoded_x).^2, dims=1)) for encoded_x in eachcol(encoded_X)]
    closest_exemplars = argmin.(distances)
    result_matrix = zeros(Float32, size(X, 1), nn.actions_number)
    @inbounds for i in 1:size(X, 2)
        result_matrix[nn.translation[closest_exemplars[i]], i] = 1.0
    end

    return result_matrix
end